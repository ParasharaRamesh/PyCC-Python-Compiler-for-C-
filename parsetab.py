
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAND ASSIGNMENT BREAK CASE COLON COMPARATORS DEFAULT DIVIDE DO DOT ELSE FALSE FLOAT HASH ID IF INT LBRACE LITERALSTRING LPAREN LSQUARE MAIN MINUS NUMBER OR PLUS RBRACE RETURN RPAREN RSQUARE SEMICOLON SWITCH THEN TIMES TRUE UNARY WHILEPROGRAM : INT MAIN LPAREN RPAREN LBRACE CODE RBRACECODE : STMT CODE\n            | STMT : S1\n            | S2\n            | S3\n            | S4\n\t\t\t| S5\n\t\t\t| S6\n\tS5 : BREAK SEMICOLONS6 : RETURN SEMICOLONS1 : TYPE_NAME_STORE SEMICOLONS2 :\tSWITCH LPAREN EXPR RPAREN LBRACE MULTICASE RBRACEMULTICASE : CASESTMT MULTICASE\n\t\t\t\t|CASESTMT : CASE EXPR COLON CODE\n\t\t\t   | DEFAULT COLON CODES3 : WHILE LPAREN COND RPAREN LBRACE CODE RBRACE S4 : ID ASSIGNMENT EXPR SEMICOLON BASICIF : IF LPAREN COND RPAREN LBRACE CODE RBRACECOMPLEXIF : BASICIF ELSE LBRACE CODE RBRACETYPE_NAME_STORE : INT ID ASSIGNMENT EXPRTYPE_NAME_STORE : FLOAT ID ASSIGNMENT EXPRCOND : EXPR OR EXPRCOND : EXPR AND EXPRCOND : EXPR COMPARATORS EXPRCOND : NUMBERCOND : IDCOND : TRUECOND : FALSEEXPR : EXPR PLUS EXPREXPR : EXPR MINUS EXPREXPR : EXPR TIMES EXPREXPR : EXPR DIVIDE EXPREXPR : NUMBEREXPR : IDEXPR : LPAREN EXPR RPAREN'
    
_lr_action_items = {'INT':([0,6,9,10,11,12,13,14,15,26,30,31,57,65,74,77,78,79,],[2,7,7,-4,-5,-6,-7,-8,-9,-12,-10,-11,-19,7,-13,7,-18,7,]),'$end':([1,24,],[0,-1,]),'MAIN':([2,],[3,]),'LPAREN':([3,17,18,27,28,29,33,34,45,49,50,51,52,54,55,56,71,],[4,27,28,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'RPAREN':([4,35,36,37,38,40,41,42,43,47,59,61,62,63,64,66,67,68,],[5,48,-35,-36,53,-27,-28,-29,-30,59,-37,-31,-32,-33,-34,-24,-25,-26,]),'LBRACE':([5,48,53,],[6,60,65,]),'RBRACE':([6,8,9,10,11,12,13,14,15,25,26,30,31,57,60,65,69,70,73,74,75,77,78,79,80,81,],[-3,24,-3,-4,-5,-6,-7,-8,-9,-2,-12,-10,-11,-19,-15,-3,74,-15,78,-13,-14,-3,-18,-3,-17,-16,]),'SWITCH':([6,9,10,11,12,13,14,15,26,30,31,57,65,74,77,78,79,],[17,17,-4,-5,-6,-7,-8,-9,-12,-10,-11,-19,17,-13,17,-18,17,]),'WHILE':([6,9,10,11,12,13,14,15,26,30,31,57,65,74,77,78,79,],[18,18,-4,-5,-6,-7,-8,-9,-12,-10,-11,-19,18,-13,18,-18,18,]),'ID':([6,7,9,10,11,12,13,14,15,22,26,27,28,29,30,31,33,34,45,49,50,51,52,54,55,56,57,65,71,74,77,78,79,],[19,23,19,-4,-5,-6,-7,-8,-9,32,-12,37,41,37,-10,-11,37,37,37,37,37,37,37,37,37,37,-19,19,37,-13,19,-18,19,]),'BREAK':([6,9,10,11,12,13,14,15,26,30,31,57,65,74,77,78,79,],[20,20,-4,-5,-6,-7,-8,-9,-12,-10,-11,-19,20,-13,20,-18,20,]),'RETURN':([6,9,10,11,12,13,14,15,26,30,31,57,65,74,77,78,79,],[21,21,-4,-5,-6,-7,-8,-9,-12,-10,-11,-19,21,-13,21,-18,21,]),'FLOAT':([6,9,10,11,12,13,14,15,26,30,31,57,65,74,77,78,79,],[22,22,-4,-5,-6,-7,-8,-9,-12,-10,-11,-19,22,-13,22,-18,22,]),'CASE':([9,10,11,12,13,14,15,25,26,30,31,57,60,70,74,77,78,79,80,81,],[-3,-4,-5,-6,-7,-8,-9,-2,-12,-10,-11,-19,71,71,-13,-3,-18,-3,-17,-16,]),'DEFAULT':([9,10,11,12,13,14,15,25,26,30,31,57,60,70,74,77,78,79,80,81,],[-3,-4,-5,-6,-7,-8,-9,-2,-12,-10,-11,-19,72,72,-13,-3,-18,-3,-17,-16,]),'SEMICOLON':([16,20,21,36,37,44,46,58,59,61,62,63,64,],[26,30,31,-35,-36,57,-22,-23,-37,-31,-32,-33,-34,]),'ASSIGNMENT':([19,23,32,],[29,33,45,]),'NUMBER':([27,28,29,33,34,45,49,50,51,52,54,55,56,71,],[36,40,36,36,36,36,36,36,36,36,36,36,36,36,]),'TRUE':([28,],[42,]),'FALSE':([28,],[43,]),'PLUS':([35,36,37,39,40,41,44,46,47,58,59,61,62,63,64,66,67,68,76,],[49,-35,-36,49,-35,-36,49,49,49,49,-37,-31,-32,-33,-34,49,49,49,49,]),'MINUS':([35,36,37,39,40,41,44,46,47,58,59,61,62,63,64,66,67,68,76,],[50,-35,-36,50,-35,-36,50,50,50,50,-37,-31,-32,-33,-34,50,50,50,50,]),'TIMES':([35,36,37,39,40,41,44,46,47,58,59,61,62,63,64,66,67,68,76,],[51,-35,-36,51,-35,-36,51,51,51,51,-37,51,51,-33,-34,51,51,51,51,]),'DIVIDE':([35,36,37,39,40,41,44,46,47,58,59,61,62,63,64,66,67,68,76,],[52,-35,-36,52,-35,-36,52,52,52,52,-37,52,52,-33,-34,52,52,52,52,]),'OR':([36,37,39,40,41,59,61,62,63,64,],[-35,-36,54,-35,-36,-37,-31,-32,-33,-34,]),'AND':([36,37,39,40,41,59,61,62,63,64,],[-35,-36,55,-35,-36,-37,-31,-32,-33,-34,]),'COMPARATORS':([36,37,39,40,41,59,61,62,63,64,],[-35,-36,56,-35,-36,-37,-31,-32,-33,-34,]),'COLON':([36,37,59,61,62,63,64,72,76,],[-35,-36,-37,-31,-32,-33,-34,77,79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'CODE':([6,9,65,77,79,],[8,25,73,80,81,]),'STMT':([6,9,65,77,79,],[9,9,9,9,9,]),'S1':([6,9,65,77,79,],[10,10,10,10,10,]),'S2':([6,9,65,77,79,],[11,11,11,11,11,]),'S3':([6,9,65,77,79,],[12,12,12,12,12,]),'S4':([6,9,65,77,79,],[13,13,13,13,13,]),'S5':([6,9,65,77,79,],[14,14,14,14,14,]),'S6':([6,9,65,77,79,],[15,15,15,15,15,]),'TYPE_NAME_STORE':([6,9,65,77,79,],[16,16,16,16,16,]),'EXPR':([27,28,29,33,34,45,49,50,51,52,54,55,56,71,],[35,39,44,46,47,58,61,62,63,64,66,67,68,76,]),'COND':([28,],[38,]),'MULTICASE':([60,70,],[69,75,]),'CASESTMT':([60,70,],[70,70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> INT MAIN LPAREN RPAREN LBRACE CODE RBRACE','PROGRAM',7,'p_PROGRAM','GenerateToken.py',203),
  ('CODE -> STMT CODE','CODE',2,'p_CODE','GenerateToken.py',216),
  ('CODE -> <empty>','CODE',0,'p_CODE','GenerateToken.py',217),
  ('STMT -> S1','STMT',1,'p_STMT','GenerateToken.py',225),
  ('STMT -> S2','STMT',1,'p_STMT','GenerateToken.py',226),
  ('STMT -> S3','STMT',1,'p_STMT','GenerateToken.py',227),
  ('STMT -> S4','STMT',1,'p_STMT','GenerateToken.py',228),
  ('STMT -> S5','STMT',1,'p_STMT','GenerateToken.py',229),
  ('STMT -> S6','STMT',1,'p_STMT','GenerateToken.py',230),
  ('S5 -> BREAK SEMICOLON','S5',2,'p_S5','GenerateToken.py',235),
  ('S6 -> RETURN SEMICOLON','S6',2,'p_S6','GenerateToken.py',239),
  ('S1 -> TYPE_NAME_STORE SEMICOLON','S1',2,'p_S1','GenerateToken.py',243),
  ('S2 -> SWITCH LPAREN EXPR RPAREN LBRACE MULTICASE RBRACE','S2',7,'p_S2','GenerateToken.py',252),
  ('MULTICASE -> CASESTMT MULTICASE','MULTICASE',2,'p_MULTICASE','GenerateToken.py',256),
  ('MULTICASE -> <empty>','MULTICASE',0,'p_MULTICASE','GenerateToken.py',257),
  ('CASESTMT -> CASE EXPR COLON CODE','CASESTMT',4,'p_CASESTMT','GenerateToken.py',261),
  ('CASESTMT -> DEFAULT COLON CODE','CASESTMT',3,'p_CASESTMT','GenerateToken.py',262),
  ('S3 -> WHILE LPAREN COND RPAREN LBRACE CODE RBRACE','S3',7,'p_S3','GenerateToken.py',270),
  ('S4 -> ID ASSIGNMENT EXPR SEMICOLON','S4',4,'p_S4','GenerateToken.py',274),
  ('BASICIF -> IF LPAREN COND RPAREN LBRACE CODE RBRACE','BASICIF',7,'p_BASICIF','GenerateToken.py',294),
  ('COMPLEXIF -> BASICIF ELSE LBRACE CODE RBRACE','COMPLEXIF',5,'p_COMPLEXIF','GenerateToken.py',298),
  ('TYPE_NAME_STORE -> INT ID ASSIGNMENT EXPR','TYPE_NAME_STORE',4,'p_STORE_int','GenerateToken.py',302),
  ('TYPE_NAME_STORE -> FLOAT ID ASSIGNMENT EXPR','TYPE_NAME_STORE',4,'p_STORE_float','GenerateToken.py',315),
  ('COND -> EXPR OR EXPR','COND',3,'p_COND_or','GenerateToken.py',325),
  ('COND -> EXPR AND EXPR','COND',3,'p_COND_and','GenerateToken.py',332),
  ('COND -> EXPR COMPARATORS EXPR','COND',3,'p_COND_comparators','GenerateToken.py',343),
  ('COND -> NUMBER','COND',1,'p_COND_number','GenerateToken.py',371),
  ('COND -> ID','COND',1,'p_COND_id','GenerateToken.py',375),
  ('COND -> TRUE','COND',1,'p_COND_true','GenerateToken.py',381),
  ('COND -> FALSE','COND',1,'p_COND_false','GenerateToken.py',388),
  ('EXPR -> EXPR PLUS EXPR','EXPR',3,'p_EXPR_PLUS','GenerateToken.py',395),
  ('EXPR -> EXPR MINUS EXPR','EXPR',3,'p_EXPR_MINUS','GenerateToken.py',403),
  ('EXPR -> EXPR TIMES EXPR','EXPR',3,'p_EXPR_TIMES','GenerateToken.py',411),
  ('EXPR -> EXPR DIVIDE EXPR','EXPR',3,'p_EXPR_DIVIDE','GenerateToken.py',419),
  ('EXPR -> NUMBER','EXPR',1,'p_EXPR_NUMBER','GenerateToken.py',427),
  ('EXPR -> ID','EXPR',1,'p_EXPR_ID','GenerateToken.py',435),
  ('EXPR -> LPAREN EXPR RPAREN','EXPR',3,'p_EXPR_BRACES','GenerateToken.py',451),
]
